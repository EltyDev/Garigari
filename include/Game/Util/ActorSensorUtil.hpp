#pragma once

#include <revolution.h>
#include <JGeometry.hpp>

class LiveActor;
class HitSensor;

namespace MR {
    void setSensorFollowPos(LiveActor *, const char *, const TVec3f *);
    void setSensorFollowMtx(LiveActor *, const char *, MtxPtr);
    HitSensor* addHitSensor(LiveActor *, const char *, u32, u16, f32, const TVec3f &);
    HitSensor* addHitSensorBinder(LiveActor *, const char *, u16, f32, const TVec3f &);
    HitSensor* addHitSensorPriorBinder(LiveActor *, const char *, u16, f32, const TVec3f &);
    HitSensor* addHitSensorRide(LiveActor *, const char *, u16, f32, const TVec3f &);
    HitSensor* addHitSensorMapObj(LiveActor *, const char *, u16, f32, const TVec3f &);
    HitSensor* addHitSensorMapObjSimple(LiveActor *, const char *, u16, f32, const TVec3f &);
    HitSensor* addHitSensorMapObjMoveCollision(LiveActor *, const char *, u16, f32, const TVec3f &);
    HitSensor* addHitSensorEnemy(LiveActor *, const char *, u16, f32, const TVec3f &);
    HitSensor* addHitSensorEnemyAttack(LiveActor *, const char *, u16, f32, const TVec3f &);
    HitSensor* addHitSensorNpc(LiveActor *, const char *, u16, f32, const TVec3f &);
    HitSensor* addHitSensorEye(LiveActor *, const char *, u16, f32, const TVec3f &);
    HitSensor* addHitSensorPush(LiveActor *, const char *, u16, f32, const TVec3f &);
    HitSensor* addHitSensorPosRide(LiveActor *, const char *, u16, f32, const TVec3f &);
    HitSensor* addHitSensorPosMapObj(LiveActor *, const char *, u16, f32, const TVec3f &);
    HitSensor* addHitSensorPosEnemyAttack(LiveActor *, const char *, u16, f32, const TVec3f &);
    HitSensor* addHitSensorMtx(LiveActor *, const char *, u16, f32, const TVec3f &);
    HitSensor* addHitSensorMtxRide(LiveActor *, const char *, u16, f32, const TVec3f &);
    HitSensor* addHitSensorMtxEnemy(LiveActor *, const char *, u16, f32, const TVec3f &);
    HitSensor* addHitSensorMtxEnemyAttack(LiveActor *, const char *, u16, f32, const TVec3f &);
    HitSensor* addHitSensorMtxAnimal(LiveActor *, const char *, u16, f32, const TVec3f &);
    HitSensor* addHitSensorAtJoint(LiveActor *, const char *, const char *, u32, u16, f32, const TVec3f &);
    HitSensor* addHitSensorAtJointMapObj(LiveActor *, const char *, const char *, u32, u16, f32, const TVec3f &);
    HitSensor* addHitSensorAtJointMapObjSimple(LiveActor *, const char *, const char *, u32, u16, f32, const TVec3f &);
    HitSensor* addHitSensorAtJointEnemy(LiveActor *, const char *, const char *, u32, u16, f32, const TVec3f &);
    HitSensor* addHitSensorAtJointEnemyAttack(LiveActor *, const char *, const char *, u32, u16, f32, const TVec3f &);
    HitSensor* addHitSensorAtJointNpc(LiveActor *, const char *, const char *, u32, u16, f32, const TVec3f &);
    HitSensor* addHitSensorCallback(LiveActor *, const char *, u32, u16, f32);
    HitSensor* addHitSensorCallbackBinder(LiveActor *, const char *, u16, f32);
    HitSensor* addHitSensorCallbackPriorBinder(LiveActor *, const char *, u16, f32);
    HitSensor* addHitSensorCallbackRide(LiveActor *, const char *, u16, f32);
    HitSensor* addHitSensorCallbackMapObj(LiveActor *, const char *, u16, f32);
    HitSensor* addHitSensorCallbackEnemyAttack(LiveActor *, const char *, u16, f32);
    HitSensor* addHitSensorCallbackEye(LiveActor *, const char *, u16, f32);
    HitSensor* addBodyMessageSensor(LiveActor *, u32);
    HitSensor* addBodyMessageSensorReceiver(LiveActor *);
    HitSensor* addBodyMessageSensorMapObj(LiveActor *);
    HitSensor* addBodyMessageSensorMapObjPress(LiveActor *);
    HitSensor* addBodyMessageSensorEnemy(LiveActor *);
    HitSensor* addMessageSensorReceiver(LiveActor *, const char *);
    HitSensor* addHitSensorMapObj(LiveActor *, const char *);
    bool tryUpdateHitSensorsAll(LiveActor *);
    void updateHitSensorsAll(LiveActor *);
    bool isSensorType(const HitSensor *, u32);
    void setSensorType(LiveActor *, const char *, u32);
    bool isSensorValid(const HitSensor *);
    HitSensor* getSensorWithIndex(LiveActor *, int);
    LiveActor* getTaken(const LiveActor *);
    void setSensorPos(HitSensor *, const TVec3f &);
    void setSensorPos(LiveActor *, const char *, const TVec3f &);
    void setSensorOffset(LiveActor *, const char *, const TVec3f &);
    f32 getSensorRadius(HitSensor *);
    f32 getSensorRadius(LiveActor *, const char *);
    void setSensorRadius(HitSensor *, f32);
    void setSensorRadius(LiveActor *, const char *, f32);
    void scaleAllSensorRadius(LiveActor *, f32);
    TVec3f& getSensorHostPos(const HitSensor *);
    TVec3f& getSensorHostGravity(const HitSensor *);
    void validateHitSensors(LiveActor *);
    void invalidateHitSensors(LiveActor *);
    void validateHitSensor(HitSensor *);
    void invalidateHitSensor(HitSensor *);
    void validateHitSensor(LiveActor *, const char *);
    void invalidateHitSensor(LiveActor *, const char *);
    bool tryValidateHitSensor(LiveActor *, const char *);
    bool tryInvalidateHitSensor(LiveActor *, const char *);
    void clearHitSensors(LiveActor *);
    s32 getSensorNum(const LiveActor *);
    HitSensor* getSensor(LiveActor *, int);
    LiveActor* getSensorHost(const HitSensor *);
    bool isEqualSensor(const HitSensor *, LiveActor *, const char *);
    bool isSensorPlayer(const HitSensor *);
    bool isSensorYoshi(const HitSensor *);
    bool isSensorBinder(const HitSensor *);
    bool isSensorReceiver(const HitSensor *);
    bool isSensorRide(const HitSensor *);
    bool isSensorPlayerOrRide(const HitSensor *);
    bool isSensorPlayerOrYoshi(const HitSensor *);
    bool isSensorPlayerOrYoshiOrRide(const HitSensor *);
    bool isSensorEnemy(const HitSensor *);
    bool isSensorEnemyAttack(const HitSensor *);
    bool isSensorNpc(const HitSensor *);
    bool isSensorMapObj(const HitSensor *);
    bool isSensorAutoRush(const HitSensor *);
    bool isSensorRush(const HitSensor *);
    bool isSensorPressObj(const HitSensor *);
    bool isSensorEye(const HitSensor *);
    bool isSensorPush(const HitSensor *);
    bool isSensorItem(const HitSensor *);
    bool isSensorGhost(const HitSensor *);
    bool tryGetItem(HitSensor *, HitSensor *);
    TVec3f& getSensorPos(const HitSensor *);
    TVec3f& getSensorPos(const LiveActor *, const char *);
    TVec3f& tryGetSensorPos(const HitSensor *);
    TVec3f& tryGetSensorPos(const LiveActor *, const char *);
    void calcSensorDirection(TVec3f *, const HitSensor *, const HitSensor *);
    void calcSensorDirectionNormalize(TVec3f *, const HitSensor *, const HitSensor *);
    void fn_80015D50(f32 *, f32 *, const HitSensor *, const HitSensor *, const TVec3f &);
    f32 calcSensorDistance(const HitSensor *, const HitSensor *);
    void calcSensorHorizonNormalize(TVec3f *, const TVec3f &, const HitSensor *, const HitSensor *);
    HitSensor* getMessageSensor();
    bool sendArbitraryMsg(u32, HitSensor *, HitSensor *);
    bool sendMsgPUsh(HitSensor *, HitSensor *);
    bool sendMsgReflect(HitSensor *, HitSensor *);
    bool sendMsgReflectV(HitSensor *, HitSensor *);
    bool fn_80015E60(HitSensor *, HitSensor *);
    bool sendMsgPlayerTrample(HitSensor *, HitSensor *);
    bool sendMsgPlayerPunch(HitSensor *, HitSensor *);
    bool sendMsgInvincibleAttack(HitSensor *, HitSensor *);
    bool sendMsgDrillAttack(HitSensor *, HitSensor *);
    bool sendMsgRockAttack(HitSensor *, HitSensor *);
    bool sendMsgJump(HitSensor *, HitSensor *);
    bool sendMsgTouchJump(HitSensor *, HitSensor *);
    bool sendMsgTaken(HitSensor *, HitSensor *);
    bool sendMsgAwayJump(HitSensor *, HitSensor *);
    bool fn_80015F00(HitSensor *, HitSensor *);
    bool sendMsgRushEnd(HitSensor *, HitSensor *);
    bool sendMsgIsRushEnable(HitSensor *, HitSensor *);
    bool sendMsgEnemyAttackMsgToDir(u32, HitSensor *, HitSensor *, const TVec3f &);
    bool sendMsgEnemyAttackFlipVeryWeak(HitSensor *, HitSensor *);
    bool sendMsgEnemyAttackFlipWeak(HitSensor *, HitSensor *);
    bool sendMsgEnemyAttackFlipWeakJump(HitSensor *, HitSensor *);
    bool sendMsgEnemyAttackFlip(HitSensor *, HitSensor *);
    bool sendMsgEnemyAttackFlipToDir(HitSensor *, HitSensor *, const TVec3f &);
    bool sendMsgEnemyAttackFlipJump(HitSensor *, HitSensor *);
    bool sendMsgEnemyAttackFlipRot(HitSensor *, HitSensor *);
    bool sendMsgEnemyAttackFlipMaximumToDir(HitSensor *, HitSensor *, const TVec3f &);
    bool sendMsgEnemyAttack(HitSensor *, HitSensor *);
    bool sendMsgEnemyAttackOrPush(HitSensor *, HitSensor *);
    bool sendMsgEnemyAttackStrong(HitSensor *, HitSensor *);
    bool sendMsgEnemyAttackStrongOrPush(HitSensor *, HitSensor *);
    bool sendMsgEnemyAttackStrongToDir(HitSensor *, HitSensor *, const TVec3f &);
    bool sendMsgEnemyAttackToFire(HitSensor *, HitSensor *);
    bool sendMsgEnemyAttackFireStrong(HitSensor *, HitSensor *);
    bool sendMsgEnemyAttackElectric(HitSensor *, HitSensor *);
    bool sendMsgEnemyAttackFreeze(HitSensor *, HitSensor *);
    bool sendMsgEnemyAttackExplosion(HitSensor *, HitSensor *);
    bool sendMsgEnemyAttackCounterSpin(HitSensor *, HitSensor *);
    bool sendMsgEnemyAttackCounterHipDrop(HitSensor *, HitSensor *);
    bool sendMsgLockOnStarPieceShoot(HitSensor *, HitSensor *);
    bool sendMsgStarPieceAttack(HitSensor *, HitSensor *);
    bool sendMsgStarPieceGift(HitSensor *, HitSensor *, u32);
    bool sendMsgEnemyAttackMaximum(HitSensor *, HitSensor *);
    bool sendMsgEnemyAttackMaximumToDir(HitSensor *,  HitSensor *, const TVec3f &);
    bool sendMsgEnemyAttackToBindedSensor(LiveActor *, HitSensor *);
    bool sendMsgEnemyAttackExplosionToBindedSensor(LiveActor *, HitSensor *);
    bool sendMsgEnemyAttackRollToBindedSensor(LiveActor *, HitSensor *);
    bool fn_80016270(HitSensor *);
    HitSensor* getHitSensorFromActor(LiveActor *);
    bool sendSimpleMsgToActor(u32, LiveActor *);
    bool sendMsgToBindedSensor(u32, LiveActor *, LiveActor *);
    bool sendMsgToBindedSensor(u32, HitSensor *);
    bool sendMsgToGroundSensor(u32, HitSensor *);
    bool sendMsgToWallSensor(u32, HitSensor *);
    bool sendMsgToRoofSensor(u32, HitSensor *);
    bool fn_80016550(LiveActor *);
    bool sendMsgToEnemyAttackBlow(HitSensor *, HitSensor *);
    bool fn_800165D0(HitSensor *, HitSensor *);
    bool fn_800165E0(HitSensor *, HitSensor *, const TVec3f &);
    bool sendMsgToEnemyAttackTrample(HitSensor *, HitSensor *);
    bool fn_80016610(HitSensor *, HitSensor *);
    bool sendMsgToEnemyAttackBlowOrTrample(HitSensor *, HitSensor *, f32);
    bool sendMsgToEnemyAttackShockWave(HitSensor *, HitSensor *);
    void sendMsgToAllLiveActor(u32, LiveActor *);
    void sendMsgToGroupMember(u32, LiveActor *, HitSensor *, const char *);
};
